#!/usr/bin/env node

const http = require('http');
require('dotenv').config();

const app = require('../app');
const cron = require('node-cron');
const logger = require('../utils/logger');

const { sequelize } = require('../db/models/index');

const { deleteExpiredTokens } = require('../utils/deleteOldRecords');

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (Number.isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            logger.error(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            logger.error(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

async function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
    logger.info(`Listening on ${bind}`);
}

async function connectDatabase() {
    try {
        await sequelize.authenticate();
        logger.info(
            `Database connection to '${process.env.NODE_ENV}' has been established successfully.`
        );
    } catch (error) {
        logger.error('Unable to connect to the database;', error);
    }
}

connectDatabase().then(() => {
    /**
     * Listen on provided port, on all network interfaces.
     */
    cron.schedule('*/5 * * * *', deleteExpiredTokens);

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
});
